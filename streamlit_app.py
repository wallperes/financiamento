# ... (c√≥digo anterior permanece igual) ...

def mostrar_resultados(df_resultado):
    """
    Exibe resultados da simula√ß√£o (sem gr√°ficos)
    """
    st.subheader("Tabela de Simula√ß√£o Detalhada")
    
    # Definir ordem e sele√ß√£o de colunas para visualiza√ß√£o e exporta√ß√£o
    colunas = [
        'M√™s/Data', 
        'Fase', 
        'Saldo Devedor', 
        'Ajuste INCC (R$)', 
        'Ajuste IPCA (R$)', 
        'Corre√ß√£o INCC ou IPCA dilu√≠da (R$)', 
        'Amortiza√ß√£o Base', 
        'Juros (R$)', 
        'Parcela Total'
    ]
    
    # Criar DataFrame para visualiza√ß√£o (com formata√ß√£o)
    df_display = df_resultado[colunas].copy()
    
    # Formatar colunas num√©ricas para visualiza√ß√£o
    for col in colunas[2:]:
        df_display[col] = df_display[col].apply(format_currency)
    
    st.dataframe(df_display)
    
    # Armazenar DataFrame para exporta√ß√£o (sem formata√ß√£o, mesmo conjunto de colunas)
    st.session_state.df_export = df_resultado[colunas].copy()

# ... (restante do c√≥digo permanece igual) ...

# Modificar a se√ß√£o de download para usar o mesmo DataFrame formatado
if 'df_resultado' in st.session_state:
    mostrar_resultados(st.session_state.df_resultado)
    
    # Bot√£o de download da planilha (usando o mesmo DataFrame formatado)
    if 'df_export' in st.session_state:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            st.session_state.df_export.to_excel(writer, index=False)
        st.download_button(
            label="üíæ Baixar planilha de simula√ß√£o",
            data=output.getvalue(),
            file_name='simulacao_financiamento.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    
    # ... (c√≥digo de √≠ndices permanece igual) ...
